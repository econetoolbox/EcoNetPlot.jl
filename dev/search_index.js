var documenterSearchIndex = {"docs":
[{"location":"#Plotting-ecological-networks","page":"Home","title":"Plotting ecological networks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A plotting package for ecological networks (food webs and more) powered by GraphMakie  and UMAP. Direct integration with EcologicalNetworksDynamics.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install with","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(url = \"https://github.com/econetoolbox/EcoNetPlot.jl\")","category":"page"},{"location":"#Plotting-from-an-adjacency-matrix","page":"Home","title":"Plotting from an adjacency matrix","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You have an adjacency matrix which represents an ecological networks, say, a food web. Elements A[i,j] = 1 means that species i eats species j. Adjacency matrix are useful tool to encode networks, but they are not very visual. The present package allows you to plot networks from adjacency matrix.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example, let's that we have two herbivores (2 and 3) eating the same plant (1). To plot this network, we simple need to write the corresponding adjacency matrix and give it to the function plot_network.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Random #hide\nRandom.seed!(123) #hide\nusing EcoNetPlot\n\nA = [\n    0 0 0 # Producer (1).\n    1 0 0 # Hervibore (2).\n    1 0 0 # Herbivore (3).\n]\nplot_network(A)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We see that species are positioned vertically according to their trophic levels. This is a very simple network, used simply to illustrate the main goal of the package. But plotting can be performed on more complex networks. For example, we can add predators feeding on herbivores in the previous network.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A = [\n    0 0 0 0 0\n    1 0 0 0 0\n    1 0 0 0 0\n    0 1 0 0 0 # Predator eating herbivore 2.\n    0 0 1 0 0 # Predator eating herbivore 3.\n]\nplot_network(A)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can further add a top predator that feed on the herbivore's predators.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A = [\n    0 0 0 0 0 0\n    1 0 0 0 0 0\n    1 0 0 0 0 0\n    0 1 0 0 0 0\n    0 0 1 0 0 0\n    0 0 0 1 1 0 # Adding top predator.\n]\nplot_network(A)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Interestingly, we can see that two energy channels are well-separated thanks to the UMAP embedding.","category":"page"},{"location":"#From-a-Foodweb-or-a-Model","page":"Home","title":"From a Foodweb or a Model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can plot a network directly from a Foodweb object of EcologicalNetworksDynamics. For example","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EcologicalNetworksDynamics\n\nfw = Foodweb(:niche; S = 10, C = 0.1, reject_cycles = true)\nplot_network(fw)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Not that non-trophic interactions are also supported.","category":"page"},{"location":"","page":"Home","title":"Home","text":"fw = Foodweb(:niche; S = 15, C = 0.1, reject_cycles = true)\nnti = NontrophicLayers(;\n    :facilitation => (; C = 0.1),\n    :interference => (; C = 0.1),\n    :refuge => (; C = 0.1),\n    :competition => (; C = 0.1),\n)\nm = default_model(fw, nti)\nplot_network(m)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here is the correspondence of the different colours:","category":"page"},{"location":"","page":"Home","title":"Home","text":"green: facilitation for recruitment\nblue: refuge provisioning\npink: interference between predators\nlight red: competition for space.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more details please see the documentation of EcologicalNetworksDynamics.","category":"page"},{"location":"docstrings/#Docstrings","page":"Functions","title":"Docstrings","text":"","category":"section"},{"location":"docstrings/#EcoNetPlot.plot_network-Tuple{AbstractMatrix}","page":"Functions","title":"EcoNetPlot.plot_network","text":"plot_network(A; layout = :umap, tl_axis = :y)\n\nPlot network graph from adjacency matrix. By default, species are positioned according to their trophic levels along the y-axis (can be changed with tl_axis argument). Their position along the x-axis is determined using umap embedding, but other options are possible (see layout).\n\nArgument\n\nA: the adjacency matrix (filled with zeros and ones, or booleans).\n\nKeyword arguments\n\nlayout: the type of layout, either 1) :umap which uses umap to compute the embedding, 2) :random which sets random values, or 3) :aligned which sets all values equal (useful for chains).\ntl_axis: set the axis of the trophic levels, either :x or :y.\nkwargs: keyword argument given to the graphplot function of GraphMakie.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetPlot.plot_network-Tuple{EcologicalNetworksDynamics.Foodweb_.Matrix}","page":"Functions","title":"EcoNetPlot.plot_network","text":"plot_network(fw::END.Foodweb; kwargs...)\n\nPlotting directly from a Foodweb object of EcologicalNetworksDynamics.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetPlot.plot_network-Tuple{Model}","page":"Functions","title":"EcoNetPlot.plot_network","text":"plot_network(m::END.Model; kwargs...)\n\nPlotting directly from a Model object of EcologicalNetworksDynamics.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetPlot.spread_points-Tuple{Any}","page":"Functions","title":"EcoNetPlot.spread_points","text":"spread_points(vec; min_dist = 0.015)\n\nSpace points so they do not overlap.\n\n\n\n\n\n","category":"method"}]
}
